<?xml version="1.0" encoding="UTF-8"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0" top="kit-thing" use="kit">

  <schema-name>FAKEUP Testing Schema</schema-name>
  <short-name>oscal-test</short-name>
  <remarks>
    <p>A test schema for prototyping and demonstrating the metaschema feature set.</p>
  </remarks>

  <define-assembly name="kit" group-as="thing-kit" show-docs="xml json">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="some_string" required="yes"/>
    <formal-name>Base</formal-name>
    <description>Wrapper for other stuff</description>
    <remarks>
      <p>The kit can have all kinds of Things.</p>
      <p>feature set for testing (schemas):
          enforcement of addressability constraints (distinctiveness of values)</p>
      <p>feature set for conversions: 'succinct JSON'; mapping nodes to element types in collapsed syntax.</p>
    <p>Also to do: find a case of variability in controls and show it off... parts?</p></remarks>
    <model>
      <assemblies named="thing" group-as="things"/>
    </model>    
  </define-assembly>
  
  <define-assembly name="thing" group-as="things" show-docs="xml json">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="some_string" required="yes"/>
    <formal-name>Base</formal-name>
    <description>Wrapper for other stuff</description>
    <remarks>
      <p>A thing can be whatever: flags, fields of various sorts mixed and not, and assemblies.
        Also the various sorts of addressing should be demonstrated. The model described should be demonstrated in companion instances (XML and JSON), which can in turn be used as targets for mutual conversion.</p>
    </remarks>
    <model>
      <field named="single-required-field" required="yes"/>
      <field named="single-field"/>
      <field named="single-mixed-field" required="yes"  />
      <fields named="plural-field" group-as="plurals"/>
      <fields named="plural-mixed-field" group-as="plurals-mixed"/>
      <assembly named="single-chunk"/>
      <assemblies named="chunk-among-chunks" group-as="chunks-together"/>
      <choice>
        <assembly named="tweedledee"/>
        <assembly named="tweedledum"/>
      </choice>
    </model>    
  </define-assembly>
  
  
<!-- tbd expand to cover rage e.g. examples showing compression  -->
  <define-field name="single-required-field" as="string">
    <formal-name>Single string (required)</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="single-field" as="string">
    <formal-name>Single string</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="single-mixed-field" as="mixed">
    <formal-name>Single string but with mixed content</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="plural-field" group-as="plurals" as="string">
    <formal-name>A single occurrence of a plural (ha)</formal-name>
    <description>As it says</description>
  </define-field>
  
  <define-field name="plural-mixed-field" group-as="plurals-mixed" as="string">
    <formal-name>Only one plural, but possibly mixed.</formal-name>
    <description>As it says</description>
  </define-field>
  
  <!--<define-field name="plural-flagged-mixed" group-as="plurals" as="string">
    <formal-name>Only one plural, but possibly mixed and possibly flagged.</formal-name>
    <description>As it says</description>
  </define-field>-->
  
  <define-assembly name="single-chunk">
    <formal-name>Chunk</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="chunk-among-chunks">
    <formal-name>Chunk among chunks</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="tweedledee">
    <formal-name>One Choice</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="tweedledum">
    <formal-name>Another Choice</formal-name>
    <description>As it says</description>
    <model>
      <field named="single-required-field" required="yes"/>
    </model>
  </define-assembly>
  
  <define-flag name="some_string" datatype="string">
    <formal-name>A string flag</formal-name>
    <description>As it says</description>
  </define-flag>
  
  <define-flag name="id" datatype="ID">
    <formal-name>An ID</formal-name>
    <description>As it says</description>
  </define-flag>
  
  <!--<define-flag name="">
    <formal-name>A string flag</formal-name>
    <description>As it says</description>
  </define-flag>
  <define-flag name="some_string"/>
  -->
  
</METASCHEMA>
