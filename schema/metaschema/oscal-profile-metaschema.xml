<?xml version="1.0" encoding="UTF-8"?>
<!-- Profile metaschema 2018-06-08 -->
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-html.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
 xmlns:oscal="http://csrc.nist.gov/ns/oscal/1.0" use="profile" top="profile">
   <title>OSCAL Profile Metaschema</title>
   
   <import href="oscal-catalog-metaschema.xml"/>
   
   <define-assembly name="profile" group-as="profiles">
      <formal-name>Profile</formal-name>
      <description>In reference to a catalog (or other resource such as profile or framework), a selection
          and configuration of controls, maintained separately</description>
      <remarks>
         <p>An OSCAL document that describes a selection with possible modification of multiple
          controls from multiple catalogs. It provides mechanisms by which controls may be selected
            (<code>import</code>), merged or (re)structured (<code>merge</code>), and emended
            (<code>modify</code>). OSCAL profiles may select subsets of control sets, set parameter
          values for them in application, and even qualify the representation of controls and
          subcontrols as given in and by a catalog. They may also serve as sources for further
          modification in and by other profiles, that import them.</p>
      </remarks>
      <model>         
            <assemblies named="import" group-as="imports"/>
            <assembly named="merge"/>
            <assembly named="modify"/>
      </model>
   </define-assembly>
   <define-assembly name="import" group-as="imports">
      <formal-name>Import resource</formal-name>
      <description>Designating a catalog, profile or other resource for controls</description>
      <remarks>
         <p>An <code>import</code> indicates a source whose controls are to be included (referenced
          and modified) in a profile. This source will either be a catalog whose controls are given
            (<q>by value</q>), or a profile with its own control imports. In the latter case,
          profiles are expected to be resolved recursively.</p>
         <p>The contents of the <code>import</code> element indicate which controls and subcontrols
          from the source, will be included. Controls and subcontrols may be either selected (using
          an <code>include</code> element) or de-selected (using an <code>exclude</code> element)
          from the source catalog or profile.</p>
         <p>When no <code>include</code> is given (whether an <code>exclude</code> is given or not),
            an <code>include</code>/<code>all</code> is assumed (that is, all controls will be
            included by default). So an empty <code>import</code> implies
            <code>include</code>/<code>all</code> indicating all controls are to be included.</p>
            
      </remarks>
      <model>
         <assembly named="include"/>
         <assembly named="exclude"/>
      </model>
   </define-assembly>
   <!-- presence of element merge means to merge (not merely aggregate) -->
   <define-assembly name="merge">
      <formal-name>Merge controls</formal-name>
      <description>Merge controls in resolution</description>
      <remarks>
         <p>Indicates (by its presence) that controls included in a profile via different and
          multiple import pathways, are to be merged in resolution. Element contents of the
            <code>merge</code> can be used to <q>reorder</q> or <q>restructure</q> controls (that
          is, indicate their order and/or structure in resolution).</p>
         <p>Implicitly, a merge statement is also a filter: controls that are included in a profile,
          but not included (implicitly or explicitly) in the scope of a merge statement, will not be
          merged into (will be dropped) in the resulting resolution.</p>
      </remarks>
      <model>
            <field named="combine"/>
            <choice>
               <field    named="as-is"/>
               <assembly named="custom"/>
            </choice>
      </model>
   </define-assembly>
   <define-field name="combine" as="empty">
      <flag name="method">
         <value>use-first</value>
         <value>merge</value>
         <value>keep</value>
      </flag>
      <formal-name>Combination rule</formal-name>
      <description>Whether and how to combine multiple (competing) versions of the same control</description>
   </define-field>
   <define-field name="as-is" as="boolean">
      <formal-name>As is</formal-name>
      <description>Merge controls into groups reflecting their catalog(s) of origin</description>
     
   </define-field>
   <define-flag name="method" datatype="string">
      <formal-name>Combination method</formal-name>
      <description>How clashing controls and subcontrols should be handled</description>
      <!--<value>use-first</value>
      <value>merge</value>
      <value>keep</value>-->
   </define-flag>
   <define-assembly name="custom" group-as="customs">
      <formal-name>Custom grouping</formal-name>
      <description>A defined (re)organization for controls; nb serves as another selector as well as sorter</description>
      <model>
         <choice>
            <assemblies named="group" group-as="groups"/>
            <fields named="call"  group-as="id-selectors"/>
            <fields named="match" group-as="pattern-selectors"/>
         </choice>
      </model>
   </define-assembly>
   <define-assembly name="group" group-as="groups">
      <formal-name>Control group</formal-name>
      <description>As in catalogs, a group of (selected) controls or of groups of controls</description>
      <model>
         <choice>
            <assemblies named="group" group-as="groups"/>
            <assemblies named="call"  group-as="id-selectors"/>
            <assemblies named="match" group-as="pattern-selectors"/>
         </choice>
      </model>
   </define-assembly>
   <define-assembly name="modify" group-as="modifys">
      <formal-name>Modify controls</formal-name>
      <description>Set parameters or emend controls in resolution</description>
      <model>
         <assemblies named="set-param" group-as="param-settings"/>
         <assemblies named="alter" group-as="alterations"/>
      </model>
   </define-assembly>
   <!-- Can have either 'all' or (a set of) 'call' -->
   <define-assembly name="include" group-as="includes">
      <formal-name>Include controls</formal-name>
      <description>Which controls and subcontrols to include from the resource (source catalog) being
          imported</description>
      <remarks>
         <p>To be schema-valid, this element must contain either (but not both) a single
            <code>all</code> element, or a sequence of <code>call</code> elements.</p>
         <p>If this element is not given, it is assumed to be present with contents <code>all</code>
          (qv); i.e., all controls are included by default, unless the <code>include</code>
          instruction calls controls specifically.</p>
      </remarks>
      <model>
            <choice>
               <field named="all"/>
               <assemblies named="call"  group-as="id-selectors"/>
               <assemblies named="match" group-as="pattern-selectors"/>
            </choice>
      </model>
   </define-assembly>
   <!--
    We are permitting include/call along with exclude/call to support tweaky with-subcontrol allowances
    But downstream (Schematron) might detect inelegant or inoperable combinations of include/call and exclude/call
  -->
   <!-- Only 'yes' should have any effect; processors should assume 'no' when implicit -->
   <define-field name="all" as="empty">
      <flag name="with-subcontrols">
         <value>yes</value>
      </flag>
      <formal-name>Include all</formal-name>
      <description>Include all controls from the imported resource (catalog)</description>
      <remarks>
         <p>This element provides an alternative to calling controls and subcontrols individually
            from a catalog. But this is also the default behavior when no <code>include</code>
            element is given in an <code>import</code>; so ordinarily one might not see this element
            unless it is for purposes of including its <code>@with-subcontrols='yes'</code>
         </p>
      </remarks>
      <!--<example>
         <import href="canonical-catalog-oscal.xml" xmlns="http://csrc.nist.gov/ns/oscal/1.0">
            <include>
               <all/>
            </include>
         </import>
      </example>-->
      <!--<example>
         <import href="canonical-catalog-oscal.xml" xmlns="http://csrc.nist.gov/ns/oscal/1.0"/>
      </example>-->
      <!--<example>
         <import href="canonical-catalog-oscal.xml" xmlns="http://csrc.nist.gov/ns/oscal/1.0">
            <include>
               <all with-subcontrols="yes"/>
            </include>
         </import>
      </example>-->

   </define-field>
   <!--<define-assembly name="with-control" group-as="with-controls">
      <flag name="with-control">
         <value>yes</value>
         <value>no</value>
      </flag>
   </define-assembly>-->
   <!--
    'call' can call *either* a control or a subcontrol by its @id
    Schematron requirement: there exists in the catalog a control or subcontrol
    by the given @id
    when @with-subcontrols is used, it must be @control-id
  -->
   <define-field name="call" group-as="id-selectors" as="empty">
       <!-- instead of using `choice` here we could use Schematron e.g. count(@control-id|@subcontrol)=1 -->
      <flag name="control-id" datatype="NCName"/>
      <flag name="subcontrol-id" datatype="NCName"/>
      <!-- with-control has to be (un)settable for odd configurations of composite profiles -->
      <flag name="with-control" datatype="NCName">
         <value>no</value><value>yes</value>
      </flag>
      <flag name="with-subcontrols" datatype="NCName">
         <value>no</value><value>yes</value>
      </flag>
      
      <formal-name>Call (control or subcontrol)</formal-name>
      <description>Call a control or subcontrol by its ID</description>
      <remarks>
         <p>Inside <code>include</code>, If <code>@control-id</code> is used (to indicate the control
          being referenced), <code>@subcontrol-id</code> cannot be used, and vice versa. (A single
            <code>call</code> element is used for each control.) This constraint is enforced by the
          schema. Likewise, <code>@with-subcontrols</code> can be used only along with
            <code>@control-id</code> not with <code>@subcontrol-id</code>.</p>
         <p>If <code>@with-subcontrols</code> is <q>yes</q> on the call to a control, no sibling
            <code>call</code>elements need to be used to call its subcontrols. Accordingly it may be
          more common to call subcontrols (enhancements) by ID only to exclude them, not to include
          them.</p>
      </remarks>
   </define-field>
   <!--
    'match' calls (includes) controls and subcontrols indiscriminately: when matching (as a regex) the @id,
    controls or subcontrols may be included.
    nb this means it is possible to include subcontrols w/o their controls, for later combination w/ other includes
  -->
   <define-field name="match" group-as="pattern-selectors" as="empty">
      <flag name="pattern"/>
      <flag name="order">
         <value>keep</value>
         <value>ascending</value>
         <value>descending</value>
      </flag>
      <flag name="with-control" datatype="NCName">
         <value>no</value><value>yes</value>
      </flag>
      <flag name="with-subcontrols" datatype="NCName">
         <value>no</value><value>yes</value>
      </flag><formal-name>Match controls and subcontrols by identifier</formal-name>
      <description>Select controls by (regular expression) match on ID</description>
   </define-field>
   <define-assembly name="exclude" group-as="excludes">
      <formal-name>Exclude controls</formal-name>
      <description>Which controls and subcontrols to exclude from the resource (source catalog) being
          imported</description>
      <remarks>
         <p>Use this as an alternative to <code>include</code> when all controls are to be included by default,
         and the profile wishes only to filter (remove) controls.</p>
      </remarks>
      <model>
         <choice>
            <fields named="call" group-as="id-selectors"/>
            <fields named="match" group-as="pattern-selectors"/>
         </choice>
      </model>
   </define-assembly>
   
   <define-assembly group-as="param-settings" name="set-param" address="id">
      <flag name="class"/>
      <flag name="depends-on" datatype="IDREF"/>
      <formal-name>Parameter Setting</formal-name>
      <description> A parameter setting, to be propagated to points of insertion
      </description>
      <model>
         <!-- declarations tbf in the imported schema and to be aligned with it -->
         <field named="label"/>
         <fields named="desc"       group-as="descriptions"/>
         <fields named="constraint" group-as="constraints"/>
         <choice>
            <field named="value"/>
            <assembly named="select"/>
         </choice>
         <fields named="link" group-as="links"/>
         <assemblies named="part" group-as="parts"/>
      </model>
   </define-assembly>

   <define-assembly name="alter" group-as="alterations">
      <flag name="control-id" datatype="NCName"/>
      <flag name="subcontrol-id" datatype="NCName"/>
      <formal-name>Alteration</formal-name>
      <description>Generalized modifications to controls or subcontrols as expressed in a profile</description>
      <remarks>
         <p>For modifying parameters, use <code>set-param</code>, which will provides traceability.</p>
      </remarks>
      <model>
               <fields     named="remove" group-as="removals"/>
               <assemblies named="add" group-as="additions"/>
      </model>
   </define-assembly>
   
   <define-field as="empty" name="remove" group-as="removals">
      <flag name="class-ref" datatype="NMTOKENS"/>
      <flag name="id-ref"    datatype="NCName"/>
      <flag name="item-name" datatype="NMTOKENS"/>
      <formal-name>Removal</formal-name>
      <description>Elements to be removed from a control or subcontrol, in resolution</description>
      <remarks>
         <p>Use <code>@class-ref</code>, <code>@id-ref</code> or <code>@item-name</code> to indicate
          class tokens or ID reference, or the formal name, of the component to be removed or erased
          from a control or subcontrol, when a catalog is resolved. The control or subcontrol
          affected is indicated by the pointer on the removal's parent (containing)
            <code>alter</code> element.</p>
         <p>To change an element, use <code>remove</code> to remove the element, then
            <code>add</code> to add it back again with changes.</p>
      </remarks>
   </define-field>
   <define-assembly name="add" group-as="additions">
      <flag name="position">
         <value>before</value>
         <value>after</value>
         <value>starting</value>
         <value>ending</value>
      </flag>
      <formal-name>Addition</formal-name>
      <description>New contents to be spliced into controls or subcontrols, in resolution</description>
      <model>
         <field named="title" required="yes"/>
         <assemblies named="param" group-as="params" address="id"/>
         <fields named="prop" group-as="props"/>
         <fields named="link" group-as="links"/>
         <assemblies named="part" group-as="parts"/>
         <assembly named="references"/>
      </model>
   </define-assembly>
   <define-flag datatype="NCName" name="control-id">
      <formal-name>Control ID</formal-name>
      <description>Value of the 'id' flag on a target control</description>
      <!--<value>before</value>
      <value>after</value>
      <value>starting</value>
      <value>ending</value>-->
   </define-flag>
   <define-flag datatype="NCName" name="with-control">
      <formal-name>Include control with subcontrol</formal-name>
      <description>Whether a control should be implicitly included, if not called.</description>
      <!--<value>yes</value>
      <value>no</value>-->
   </define-flag>
   <define-flag datatype="NCName" name="with-subcontrols">
      <formal-name>Include subcontrols with control</formal-name>
      <description>Whether subcontrols should be implicitly included, if not called.</description>
      <!--<value>yes</value>
      <value>no</value>-->
   </define-flag>
   
   <define-flag datatype="NCName" name="subcontrol-id">
      <formal-name>Control ID</formal-name>
      <description>Value of the 'id' flag on a target subcontrol</description>
      <!--<value>before</value>
      <value>after</value>
      <value>starting</value>
      <value>ending</value>-->
   </define-flag>
   <define-flag datatype="string" name="pattern">
      <formal-name>Pattern</formal-name>
      <description>A regular expression matching the IDs of one or more controls or subcontrols to be selected</description>
   </define-flag>
   <define-flag datatype="NCName" name="order">
      <formal-name>Pattern</formal-name>
      <description>A regular expression matching the IDs of one or more controls or subcontrols to be selected</description>
      <!--<value>keep</value>
      <value>ascending</value>
      <value>descending</value>-->
   </define-flag>
   <define-flag datatype="NCName" name="position">
      <formal-name>Position</formal-name>
      <description>Where to add the new content with respect to the targeted element (beside it or inside it)</description>
      <!--<value>before</value>
      <value>after</value>
      <value>starting</value>
      <value>ending</value>-->
   </define-flag>
   <define-flag datatype="NMTOKENS" name="class-ref">
      <formal-name>References by class</formal-name>
      <description>Items to remove, by class</description>
   </define-flag>
   <define-flag datatype="NCName" name="id-ref">
      <formal-name>References by ID</formal-name>
      <description>Items to remove, by ID</description>
   </define-flag>
   <define-flag datatype="NMTOKENS" name="item-name">
      <formal-name>References by name</formal-name>
      <description>Items to remove, by item type (name), e.g. title or prop</description>
   </define-flag>
</METASCHEMA>
