<?xml version="1.0" encoding="UTF-8"?><?xml-model href="specml.rnc" type="application/relax-ng-compact-syntax"?>
<!--<?xml-stylesheet type="text/xsl" href="specml-html-xslt1.xsl"?>-->
<?xml-stylesheet type="text/css" href="specml.css"?>
<?xml-model href="spec-checkup.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<SPECIFICATION xmlns="http://csrc.nist.gov/ns/oscal/specml">
  <head>Profile Resolution</head>
  <p>These specifications describe how to render an OSCAL profile document in
    the form of an OSCAL catalog. We call this <term>profile resolution</term>.</p>
  <p>These specifications take the form of a tag set mapping between two XML applications, namely
    the OSCAL <term>profile</term> and OSCAL <term>catalog</term> document models. The same mapping
    (transformation from source to target) can be effected using other expressions of the OSCAL
    model such as JSON or YAML object serializations. In these specifications, there will be
    reference to XML constructs such as <q>element</q> and <q>attribute</q> and examples using XML
    syntax: these however are for illustrative purposes only and normative only with respect to the
    semantic mapping, not the syntax as such. The XML orientation of the specification of this
    mapping is an expediency; in the longer term we plan specifications that are
    format-agnostic.</p>
  <section><head>Reading these specifications</head>
  <section>
    <head>Terminology</head>
    <p>In these specifications there are references to <s>source</s>, <t>target</t> and
        <term>result</term>. <s>Source</s> refers sometimes to profile documents as a type
      (abstractly), and sometimes to instance profiles in operation, or elements within profiles
      (particular kinds of sources). <t>Target</t> refers to the intended output of the
      transformation, that is the catalog model generally (as a document type) or, for particular
      source instances or elements, particular targets.</p>
    <p>The term <term>result</term> refers to the actual results of transformation, as opposed to
        the intended or expected results. Conformance to these specifications requires that a
        processor's result corresponds to the target as described, given a particular source.</p>
    <p>The term <term>directive</term> is used in these specifications to refer to an element or
        combination of elements in source data, which is designed to effect a particular outcome in
        the result catalog. For the most part, directives are in the source profile document – for
        example, a <s>set</s> element in a profile is a directive to set a parameter value in the
        result catalog.</p>
    <p>In contrast to profiles, catalogs do not contain directives but instead, representations of
        security controls and their parts, optionally in groups, on which directives are assumed to
        operate. There is one exception: the <s>insert</s> element in control catalogs can be
        considered a directive that a parameter value be inserted into a particular location in
        running text (data content), when a catalog is rendered. Since these semantics respect
        catalog rendering, however, not profile resolution, they are out of scope for this
        document.</p>
      <p>Finally, this specification describes not only (source) profiles and (result) catalogs, but
          <term>interim catalogs</term> as well. This is because the conceptual model of profile
        resolution takes a profile through several steps, in which controls are collected from
        source catalogs, combined, and potentially modified. As described by this specification,
        interim catalogs are produced during this process: they are essentially  temporary
        collections of controls in a transitional state. In the last stage of processing, these
        interim catalogs are collapsed or combined into the single result catalog.</p>
      <p>For illustrative purposes, these interim catalogs are, like source and target formats, also
        be represented by tagging in examples given here, even though no OSCAL processor is obliged
        to produce or recognize such XML at any point, as long as it produces the same results
        (final outputs) from the same inputs.</p>
  </section>
  <section>
    <head>Use of XPath</head>
    <p>Additionally, in these specifications XPath notation is used to identify elements and
      attributes in the XML. A summary of some lightweight XPath syntax:</p>
    <ul>
      <li>
        <p><xpath>element</xpath> (unpunctuated) indicates an element named
          <xpath>element</xpath></p>
      </li>
      <li>
        <p><xpath>@attribute</xpath> (punctuated <q>@</q>) indicates an attribute named <xpath>attribute</xpath></p>
      </li>
      <li>
        <p><xpath>elem/@attr</xpath> indicates an attribute named <xpath>attr</xpath> on an element named
            <xpath>elem</xpath></p>
      </li>
      <li>
        <p><xpath>elmn[@att='val']</xpath> indicates an element <xpath>elmn</xpath> that has an
          attribute <xpath>@att</xpath> with value <code>val</code>. </p>
      </li>
    </ul>
  </section>
  
  </section>
  <section>
    <head>Operational context</head>
    <section>
      <head>Processing context and scope</head>
      <p>A <term>profile</term> in OSCAL represents a selection and configuration of a set of
          <term>controls</term>. In the normal case, the set of controls available to a profile is
        provided by a catalog. For example, the three NIST SP 800-53 profiles representing the
        impact baselines HIGH, MODERATE and LOW: each of these calls on a catalog representing the
        families, controls and control enhancements described in SP 800-53/53A. In a data processing
        system, this dependency can be modeled in the form of separate documents - the (nominal)
          <q>catalog</q> and its <q>profile</q>, the latter being the selection and application of
        controls, as distinct from the catalog from which those controls are derived.</p>
      <p>However, profiles may also select controls from profiles, implicitly selecting from
        underlying catalogs as modified by those profiles. And they can select a combination of
        controls from more than one catalog or profile origin.</p>
      <p>In the most common case, a profile will acquire its controls from a single catalog or
        perhaps a complementary pair of catalogs (perhaps an authoritative standard catalog, plus a
        supplement). In the general case and more broadly, however, OSCAL must support sourcing more
        than one catalog at once, in order to aggregate and organize controls from any sources. In
        order to provide sensible and transparent results even for incoherent inputs, this
        specification defines these processes such that legible and testable results are produced
        even when they are formally invalid to all constraints governing the outputs. Such
        downstream processing errors including validation errors are expected to be detectable and
        remediable. This especially applies to situations where multiple catalogs are sourced, or
        where the same catalog is sourced more than once.</p>
      <p>In order to support these semantics – because whatever data set is sourced by a profile, it
        must <q>look like a catalog</q> – the results of resolving a single profile must be in the
        form of a single (<q>virtual</q> or implicit) catalog. Two different OSCAL processors that
        promise profile resolution, must deliver the same catalog with regard to its controls; their
        ordering (insofar as the target format represents ordering) and the structure (groups) in
        which they are embedded. This specification is designed to make this possible, by defining
          <q>the same</q> in this context.</p>
    </section>
    <section>
      <head>Why resolve a profile as a catalog</head>
      <p>A profile is a representation of a delta, a <q>here to there</q>. As such, a profile might
        be conceived of as a recipe or instruction set – a sequence of steps or procedures – whereby
        to create an OSCAL catalog (set of controls describing security requirements) from an OSCAL
        catalog (set of controls describing security requirements). The primary use case for this is
        when we need to make a new catalog to apply to a set of systems, from a canonical, received,
        mandated or standard catalog with a more general scope.</p>
      <p>This is because although catalogs - for example, the controls described in NIST SP 800-53 -
        are published, available for use, and even standardized, they can never be used exactly in
        the form in which they are acquired. They must be taken from the packaging and placed into
        operational context before they mean anything. This typically requires a few operations over
          <q>raw catalogs</q> be supported by a profiling mechanism. We must be able to select
        controls; we must be able to arrange them in order (or not); and we must be able to
        condition them by setting parameters defined for them and making adjustments to them. </p>
      <p>By representing the steps by which a base catalog can be sliced, sifted, amended and
        edited, into a (nominally) finished or ready set of control requirements, a profile makes it
        easier to codify and preserve even very incidental or temporary local revisions of a control
        catalog. Once expressed as a profile in OSCAL syntax, that is, a set of emendations to a
        catalog can be managed entirely separately and independently from the catalog. Because a
        conformant processor can always create the customized catalog, by resolving the profile
        against its sources, it can also be taken as a proxy for that catalog for other purposes.
        The customized catalog can be made available wherever and for whatever purposes it is
        needed, while its revision and maintenace can be focused on the profile.</p>
      <p>This separation of concerns - between the originating catalog authors, who describe policy
        in only general terms, and the authors of the <q>user manual</q> catalog, who must describe
        policy in very particular and local terms - is a necessary factor in supporting sustainable
        processes with the potential for automation and process improvement. An OSCAL profile
        bridges the gap between a set of general guidelines, and actionable rules. Only by examining
        the system in the context of the actual intentions appropriate to that system, can we
        properly assess its security. Profiles make this possible.</p>
      <p>In order for this to work however we need a process that can perform the necessary
        operations, to apply the delta to an unmodified catalog, to produce the local view of the
        catalog as modified. This is profile resolution.</p>
    </section>
    <section>
      <head>Formal validation of source and result</head>
      <p>In an XML context, document validation is available as a means of determining whether an
        arbitrary XML document entity conforms to structural and naming constraints such as must be
        assumed by processors respecting application semantics. These specifications assume that XML
        inputs for profile resolution will be <em>schema-valid</em> with respect to the OSCAL
          <term>profile</term> model, and hence will be tagged in the namespace
          <code>http://csrc.nist.gov/ns/oscal/1.0</code>.</p>
      <p>Similarly, the definition of the output format or results, is constrained by the OSCAL
          <term>catalog</term> model as defined by its schema.</p>
    </section>
    <section>
      <head>ID uniqueness constraint</head>
      <p>In addition to the respective schemas, there are additional constraints over the data that
        this process relies on, both implicit (and unspecified) constraints regarding usage (to
        whatever extent this specification fails to define clear boundaries and expected behaviors),
        and explicit constraints not validated by the applicable schema. The most important of these
        is ID-distinctiveness. Every <s>id</s> flag (in XML, represented by <xpath>@id</xpath>
        attributes) on an element in the model, whether it be attached to a control, group or an
        element within a control, must be distinct and unique, within the defined processing scope,
        inasmuch as this value will be used in processing as a proxy for <term>element
          identity</term> and especially (in the case of controls) for <term>control
        identity</term>. That is, it is on the basis of their IDs that controls are selected and
        referenced, and clashes are detected and recognized between competing representations of
        controls.</p>
      <p>One of the reasons a document may be considered by this specification as
          <term>invalid</term>, is that violates constraints over ID uniqueness, even if it is
        formally schema-valid. Because in current versions, the OSCAL schemas do not formally
        validate the distinctiveness of ID values, this constraint – within the scope of either the
        source document (at minimum) or across a larger operational environment as appropriate –
        must be checked by another process. For SP800-53 control catalog we have a Schematron for
        this purpose of validating that IDs given to all elements, including those representing
        controls, parts of controls such as statements or assessment objectives, parameters etc.,
        are all unique within the catalog.</p>
      <p>Because ID distinctiveness within the scope of processing, is critical, OSCAL users should
        take care that different catalogs have distinct sets of IDs. This applies to all structures
        within the catalogs, not only controls but also groups, parameters, citations and
        resources.</p>
    </section>
    <section>
      <head>Detecting issues in profiles</head>
      <p>It is frequently possible by static analysis to detect many conditions even in valid
        profile documents, that will result in problematic catalogs in resolution. The most common
        issue will be clashing controls, that is more than one control with a given identifier (ID),
        making references to such controls ambiguous. Such analysis is outside the scope of these
        specifications.</p>
    </section>
    <section>
      <head>Comments in result documents</head>
      <p>In an XML-based profile resolution, XML comments are one easy way for a processor to trace
        events or conditions without affecting the output's nominal semantics. To support this,
        while two processors are obliged to return the same catalog XML for the same profile XML
        inputs, they are not required to match one another's comments, whitespace usage, attribute
        order, or processing instructions, only each other's elements and attributes.</p>
      <p>One consequence of this is that processes intended to compare two profile resolutions may
        have to accommodate differences in comments, considering them as insignificant along with
        other differences in serialization.</p>
    </section>
  </section>
  <section>
    <head>Result catalog structure</head>
    <section>
      <head>Form and organization of resolution result</head>
      <p>The output of a profile resolution should take the form of a catalog.</p>
      <p>In most cases, catalog results will be valid to the OSCAL catalog. <revisit>Where invalid
          results are possible, this specification should note the possibility and the expected
          variance.</revisit></p>
      <p> At its base, an OSCAL <s>profile</s> source produces a <t>catalog</t>:</p>
      <mapping unit-test="base-test_profile.xml">
        <tagging whose="source_profile">&lt;profile id="profile-identifier">...&lt;/profile></tagging>
        <tagging whose="target_catalog">&lt;catalog id="{new-catalog-identifier}">
  &lt;metadata>[Required metadata, as described below]&lt;/metadata>
  [ Controls or control groups, as described below ]
  &lt;back-matter>[Optional back matter as described below]&lt;/back-matter>
&lt;/catalog></tagging>
      </mapping>
      <p>A valid catalog must have <t>metadata</t> in addition to controls and control groups.
        Additionally it may have <t>back-matter</t>. How to produce and populate the <t>metadata</t>
        and <t>back-matter</t> is described below, as is the construction of the <t>catalog/@id</t>
        in the result.</p>
    </section>
    <section>
      <head>Validation of resolution result</head>
      <p>Although the result of profile resolution takes the form of a catalog, it may not be valid
        to all constraints that define the OSCAL catalog format, whether enforced by its schema or
        by other means such as Schematron. This is because correct processing of incoherent inputs
        (even when valid to the profile schema) must result in incoherent outputs.</p>
      <p>The conditions that produce invalid outputs can however be detected and prevented. [Any
        other issues here?]</p>
      <ul>
        <li>
          <p>If the merge behavior is set to <s>combine[@method='keep']</s>, or not given (as this
            setting is the default), a profile with multiple calls on controls will result in
            mulitiple copies of controls with clashing IDs. These should both raise validation
            errors since IDs must be unique on elements in document scope.</p>
          <p>This can be prevented in either of two ways:</p>
          <ul>
            <li>
              <p>Ensure that no controls are called more than once, even across separate imports.
                This condition can generally be detected statically by comparing the imports, taking
                their catalogs into account when <s>include/all</s> is used (explicitly or
                implicitly when no <s>include</s> is given).</p>
            </li>
            <li>
              <p>Use another combination method (<s>method='use-first'</s> or <s>method='merge'</s>)
                to resolve the clashes.</p>
            </li>
          </ul>
          <p> by using a different combination rule and/or (the correct solution in any case) by
            ensuring that and that any groups called more than once in different imports of a given
            catalog (even indirectly by way of intervening profiles) are merged using
              <s>merge/as-is</s> or <s>merge/custom</s>.</p>
        </li>
        <li>
          <p>Similarly, <s>combine[@method='keep']</s> can result in clashing groups, even
            containing distinct (non-clashing) controls, when a source catalog with group structures
            is called more than once (in parallel imports). Such groups can be merged by using
            either directive <s>merge/as-is</s> or <s>merge/custom</s>.</p>
        </li>
      </ul>
    </section>
    <section>
      <head>top-level @id</head>
      <p>Because document IDs are sometimes used to distinguish data points in processing context, a
        resolved profile may not present the same ID as any of the catalogs it is importing, or the
        same ID as its source profile.</p>
      <p>It is permitted to produce the profile’s ID in resolution via a static mapping from the ID
        of the source. For example, the resolution of profile with ID <code>profile-X</code> might
        have ID <code>profile-X-RESOLVED</code>.</p>
    </section>
    <section>
      <head>Instance metadata</head>
      <p><revisit>[XXX Rules for constructing or copying or modifying a metadata section for a
          resolved profile]</revisit></p>
      <tagging whose="target_catalog">&lt;title>{ profile title} RESOLUTION&lt;/title>
&lt;last-modified>{ resolution date stamp }&lt;/last-modified>
&lt;prop name="catalog-title">{ imported catalog title }&lt;/prop>
&lt;prop name="catalog-title">{ imported catalog title }&lt;/prop>
</tagging>
    </section>
    <section>
      <head>Body of the result</head>
      <p>The construction of the body of the result catalog is described in the next section.</p>
      <p>The body of the result <t>catalog</t>, after its <term>metadata</term>, is structured as
        follows, depending on its merge directive:</p>
      <ul>
        <li>
          <p>If no <s>merge</s> was given, or if <s>merge</s> is given without <s>custom</s> or
              <s>as-is</s>, controls are flat (unstructured) in the result catalog.</p>
          <p>The result catalog has a content model as follows <revisit>(DTD/RNC
              notatation)</revisit>: <code>(metadata, param*, control*, back-matter?)</code></p>
        </li>
        <li>
          <p>If <s>merge/as-is</s> is used, the structure of the result will reflect the
            structure(s) of the source catalog(s).</p>
          <p>The result catalog has the content model <code>(metadata, param*, control*, group*,
              back-matter?)</code> where <code>group</code> has the model <code>(title?, control*,
              group*)</code></p>
        </li>
        <li>
          <p>If <s>merge/custom</s> is used, see above. The content model of the result catalog is
            the same as that for <s>merge/as-is</s>.</p>
        </li>
      </ul>
      <p>Unless it be for special purposes in a debugging or tracing mode, profile results may not
        show and groups or structures in the form of elements not described here. Depending on the
        merge directive, all groups will be given either by the catalog source(s)
          (<s>merge/as-is</s>) or the profile (<s>merge/custom</s>), or there will be no groups at
        all (no merge rule).</p>
    </section>
    <section>
      <head>Back matter</head>
      <p>The back matter in result catalogs is assembled from the back matter of their source
        profiles in combination with the back matter of source catalogs. These are all comprised by
          <s>back-matter</s> elements. Elements inside <s>back-matter</s> include <s>citation</s>
        and <s>resource</s>. Either of these elements may be cross-referenced from any location in
        their source documents by means of a URI fragment identifier on an <s>href</s> flag, for
        example <code>&lt;resource id="document-X</code>> may be referenced by <code>&lt;link
          href="#document-X"></code>. Whether an element inside back matter is included in the
        result, depends on whether such a cross-reference has been included.</p>
      <p>Specifically, any <s>citation</s> or <s>resource</s> inside <s>back-matter</s> either in
        the profile, or in any imported catalog, is considered eligible for propagation into the
        result if either of two conditions obtains:</p>
      <ul>
        <li>
          <p>The element is referenced by any element inside the profile metadata.</p>
        </li>
        <li>
          <p>The element is referenced from a link or anchor (<s>link</s> or <s>a</s> element)
            inside controls, parameters, or any copy (for example, paragraphs inside
              <t>group/part</t> included in the resolved profile).</p>
        </li>
      </ul>
      <p>The assembly of the result <term>back-matter</term> occurs by including all eligible
        citation elements followed by all resource elements, in the same order as given in their
        sources.</p>
      <p>Additionally, merge rules (see next section) will affect whether and how duplicate or
        competing <s>citation</s> or <s>resource</s> elements are handled, to remove or combine
        multiple occurrences of the same referenced object.</p>
      <p>In resolution, one way of obtaining this result is to permit all contents of back matter to
        persist until controls are selected and modified (that is, through the modification stage),
        and then filter these to include only those elements still referenced by included
        contents.</p>
    </section>
  </section>
    <section>
      <head>Profile mapping to catalog</head>
      <p>Considered as a <q>document</q> or integrated data set (object), a profile has three sections,
        each of which corresponds to a conceptual step in resolution. To resolve a catalog fully is
        to perform all these steps.</p>
      <p>While the steps are described in this specification as occurring in sequence, a profile
      processor is not obliged to perform them in the order described. Conformance to these
      specifications is determined by whether the results of processing (<term>resolution</term>)
      appear as described, not on whether the means to produce those results work in exactly the
      manner described here.</p>
      <p>The three steps are <s>import</s> (control <term>selection</term>); <s>merge</s>; and
        <s>modify</s>. In brief:</p>
      <ul>
        <li><p><s>import</s> identifies one or more control sources (catalogs or profiles) and the controls
          within them to be included in this profile</p></li>
        <li><p><s>merge</s> produces the rules for how controls will be organized and merged (or not)</p></li>
        <li><p><s>modify</s> indicates how parameters in the underlying catalog may be modified or set, and how
          control contents may be amended or modified.</p></li>
      </ul>
      <p>The <term>selection</term> (import) stage is mandatory inasmuch as a profile that imports
      no controls is inoperative. Such a profile is not in error and it can be resolved, but its
      resolution will contain no controls (and as such might fail a validation check against the
      catalog schema).</p>
      <p>The <term>merge</term> stage can be considered mandatory in that there are default rules
      for merging, to be followed when no merge behavior is given; thus <q>no merging</q> is
      permitted, and a profile with no merge semantics indicated is not in error.</p>
      <p>The <term>modify</term> stage is optional in that controls do not have to be modified and
      parameters do not have to be set; a profile is always free to represent these components as
      they are given in their catalogs. Leaving a parameter unset, or qualifying its setting (with
      additional information or constraints) without modifying its value, is also possible; like a
      catalog, a profile can represent a set of controls and parameters that are not fully defined
      or are defined only at a general level, for purposes of use at another layer (profile or
      implementation) where more specific definition and guidance can be provided.</p>
      <p>As described in the previous section, when resolved, an OSCAL profile takes the form of an
      OSCAL catalog. The merge semantics described below will produce outputs conforming to this
      organization.</p>
      <section>
        <head>Import - select controls</head>
      <p>A profile begins by importing catalogs, all of whose controls are made available. Each
        import constitutes a <term>selection</term> of controls from a catalog or profile. Imports
        are given in series after the metadata:</p>
      <tagging whose="source_profile">&lt;profile>
  &lt;metadata>[ Profile metadata ]&lt;/metadata>
  &lt;import href="#catalog">... selection of controls ...&lt;/import>
  &lt;import href="#catalog-supplemental">... selection of controls ...&lt;/import>
&lt;/profile>
</tagging>
        <p>The resource indicated can be either an OSCAL catalog or an OSCAL profile. A catalog
        provides controls in their native form. An imported profile is resolved on import, using the
        same rules for the resolution of the profile at the top level, so a catalog is presented to
        the importing profile.</p>
        <p>No profile may import itself either directly or indirectly. An import directive that
        indicates either the profile itself, or a profile into which it is being (currently)
        imported, must be ignored. Optionally, a processor may issue a warning.</p>
        <p>In an import directive, the reference to the resource to be imported appears on an
          <s>@href</s> flag. It takes either of two forms, external or internal:</p>
        <section>
          <head>External</head>
          <p>An external reference appears as an absolute or relative URL</p>
          <p>Indicating a file available via <revisit>[prototol?]</revisit></p>
          <tagging whose="source_profile">&lt;import href="../../nist.gov/SP800-53/rev4/xml/NIST_SP-800-53_rev4_catalog.xml">
  &lt;include>
    &lt;call control-id="ac-1"/>
  &lt;/include>
&lt;/import>
</tagging>
        </section>
        <section>
          <head>Internal</head>
          <p>A catalog or profile to be imported can also be indicated using an internal link via a
            URI fragment identifier (starting with <code>#</code>). If an import href resolves to a
              <code>resource</code> elsewhere in the profile (typically in back matter), that
            resource can be retrieved to provide the source catalog.</p>
          <cf  file="examples/base2-test_profile.xml"/>
          <tagging whose="source_profile">&lt;import href="#nist-sp800-53_catalog">
  &lt;include>
    &lt;call control-id="ac-1"/>
  &lt;/include>
&lt;/import>

  ...
  
&lt;back-matter>
  &lt;resource id="nist-sp800-53_catalog">
    &lt;desc>SP 800-53 catalog (OSCAL format) on Github&lt;/desc>
    &lt;rlink href="https://github.com/usnistgov/OSCAL/blob/master/content/nist.gov/SP800-53/rev4/xml/NIST_SP-800-53_rev4_catalog.xml"/>
  &lt;/resource>
&lt;/back-matter>
</tagging>
          <p>An internal cross-reference from an import to a resource that does not reference a
            catalog or profile, or a cross-reference to something other than a resource, is
            inoperative. It may be signaled as an error [or warning] by a processor.</p>
        </section>
      <section>
        <head>Availability of documents returned by given URIs</head>
        <p>The rules of XSLT <code>document()</code> apply to the traversal of any URI: that is, it
          is assumed that all calls to a given (resolved) URI reference, will return the same
          result.</p>
        <p>If documents called for import are determined to be unavailable, the processor may drop
          them along with a warning, both or either out of band (e.g. through <code>STDERR</code>)
          or in the catalog results.</p>
      </section>
      <section>
        <head>Missing imports</head>
        <p>An import that does not reference either an OSCAL catalog, or an OSCAL profile that can
          be resolved as a catalog, is dropped.</p>
        <mapping unit-test="profile-resolution-examples/broken_profile.xml">
          <tagging whose="source_profile">&lt;profile id="broken_profile">
  &lt;metadata> … &lt;/metadata>
  &lt;import href="missing_profile.xml">
     &lt;include>
        &lt;call control-id="ac-1"/>
     &lt;/include>
  &lt;/import>
&lt;/profile>
</tagging>
          <tagging whose="target_catalog">&lt;profile id="home_profile_RESOLVED">
  &lt;metadata> … &lt;/metadata>
&lt;/profile>
</tagging>
          <p>Optionally, a processor may produce a comment indicating the lapse:</p>
          <tagging whose="target_catalog">&lt;profile id="home_profile_RESOLVED">
  &lt;metadata> … &lt;/metadata>
  &lt;!-- referenced resource 'missing_profile.xml' cannot be resolved -->
&lt;/profile>
</tagging>
        </mapping>
        <p>In this context, an OSCAL profile that makes direct or indirect reference (via its own
          imports) to the importing catalog, is also dropped as unavailable. See below under
            <q>Circular Imports</q>.</p>
      </section>
      <section>
        <head>Multiple imports</head>
        <p>In the selection stage, each import directive is processed to produce a set of controls
          and (when they are referenced) parameters. These controls and parameters are represented
          in the form of an interim catalog. Note that this occurs in the selection stage even if
          the same catalog (resource) is imported multiple times: each distinct import collects
          controls in an interim catalog:</p>
        <mapping unit-test="profile-resolution-examples/import-twice_profile.xml">
          <tagging whose="source_profile">&lt;profile id="import-twice_profile">
    &lt;metadata> … &lt;/metadata>
    &lt;import href="#catalog">
        &lt;include> … select controls …  &lt;/include>
    &lt;/import>
    &lt;import href="#catalog">
        &lt;include> … select controls …  &lt;/include>
    &lt;/import>
    &lt;back-matter> … &lt;/back-matter>
&lt;/profile></tagging>
          <tagging whose="target_catalog">&lt;profile id="import-twice_profile_RESOLVED">
  &lt;metadata> … &lt;/metadata>
  &lt;catalog id="catalog-id"> … selected controls … &lt;/catalog>
  &lt;catalog id="catalog-id"> … selected controls … &lt;/catalog>
  &lt;back-matter> … &lt;/back-matter>
&lt;/profile>
</tagging>
        </mapping>
        <p>The interim catalogs are combined and collapsed in the next stage of processing,
            <term>merge</term> (see below) .</p>
        <p>Multiple imports may result in outputs with clashing controls (see below). Typically this
          will be because a control has been selected twice, and no merge behavior has been
          indicated to resolve the clash.</p>
        <p>In general, sibling imports (two imports into the same profile) should never have to call
          the same catalog; and this condition may be reported as a warning. More typical cases of
          multiple imports of the same resource will be when a profile A imports another profile B,
          which calls catalog Z, and then profile A calls catalog Z again to acquire controls not
          included in profile B, or as unmodified by profile B.</p>
      </section>
        <section>
          <head>Selecting controls</head>
          <p>Imports can specify controls by inclusion and exclusion, either or both in
            combination.</p>
          <section>
            <head>Inclusion</head>
            <p>Using inclusion, all or some controls may be selected from a catalog.</p>
          <section>
            <head>Selecting by ID</head>
            <p>Select individual controls or controls by groups using <s>control-id</s> selectors
              corresponding to their IDs.</p>
            <cf file="examples/base-test_profile.xml"/>
            <tagging whose="source_profile">&lt;include>
  &lt;call control-id="ac-1"/>
&lt;/include>
</tagging>
          </section>
          <section>
            <head>Matching IDs to select groups of related controls</head>
            <p>Controls may also be selected using match patterns against their IDs. This is useful
              because related controls (either in a hierarchy, or together in a group) frequently
              have related IDs as well.</p>
            <cf file="examples/include-match-test_profile.xml"/>
            <tagging whose="source_profile">&lt;include>
  &lt;call match="^ac"/>&lt;!-- matches any control whose ID matches regex '^ac' -->
&lt;/include>
</tagging>
            <p><revisit>The match pattern is evaluated as a regular expression using XPath regular
                expression syntax. [XXXX]</revisit></p>
          </section>
          <section>
            <head>Selecting all controls</head>
            <p>Select all controls from a catalog by using an <s>include/all</s> rule:</p>
            <cf file="examples/include-all-test_profile.xml"/>
            <tagging whose="source_profile">&lt;include>
  &lt;all/>
&lt;/include>
</tagging>
          </section>
            <section>
              <head>Including child controls</head>
              <p>In OSCAL, controls may contain controls. For example, in SP 800-53 many controls
              are supplemented with control enhancements; in OSCAL these are represented as child
              controls within parent controls. So parent AC-2 has children AC-2(1) through AC-2(13),
              for example.</p>
              <p>Child controls can be included by the same mechanism as controls, i.e. by means of
                an ID call. Alternatively a match can frequently be applied (at least given most ID
                assignment schemes) to match controls and child controls together.</p>
              <p>Additionally, a <s>@with-child-controls</s> directive on a <s>call</s> or
                <s>match</s> can indicate that child controls (that is, direct children not all
              descendants) should be included with the applicable call(s) or match(es).</p>
              <p>Furthermore, <s>all[@with-child-controls='no']</s> may select all controls placed
              directly within a group, excluding all  controls appearing inside other controls.</p>
            <cf file="include-all-no-children.xml"/>
            </section>
          <section>
            <head>Redundant calls</head>
            <p>Calls and matches may be combined in a single import. Their effect is cumulative; any
              control that is selected by both calling and matching from a given <s>include</s>
              directive, or by matching more than one pattern, is included once (unless it is also
              marked for exclusion, see below).</p>
          </section>
          </section>
          <section>
            <head>Exclusions</head>
            <p>Exclusions work the same way as inclusions, except with the opposite effect - the
            indicated control(s) do not appear in the result catalog.</p>
            <p>Additionally, there is no such thing as <s>exclude/all</s>, which is invalid and
            should be considered inoperable.</p>
            <p>Any control designated to be both included and excluded, is excluded. This holds
            irrespective of the specifity of the selection for inclusion or exclusion. For example,
            if AC-1 is included by id <code>ac-1</code> and excluded by matching <code>ac.*</code>,
            it is excluded. Selection for exclusion prevails.</p>
          </section>
          <section><head>Implicit <s>all</s></head><p>An empty import statement should be considered the same as an import with an <s>include/all</s>.
            An empy <s>import</s> directive</p><tagging whose="source_profile">&lt;import href="#nist-catalog"/>
</tagging><p>is
            functionally equivalent to
              this:</p><tagging whose="source_profile">&lt;import href="#nist-catalog">
  &lt;include>
    &lt;all/>
  &lt;/include>
&lt;/import>
</tagging>
          <cf file="examples/include-all-implicit-test_profile.xml"/><p>The same thing occurs if an <s>exclude</s> directive is given without an <s>include</s>
            directive.</p><p>Example:</p><tagging whose="source_profile">&lt;import href="#nist-catalog">
  &lt;exclude>
    &lt;call control-id="ac-1"/>
  &lt;/exclude>
&lt;/import>
</tagging><p>is
            the same as
              this:</p><tagging whose="source_catalog">&lt;import href="#nist-catalog">
  &lt;include>
    &lt;all/>
  &lt;/include>
  &lt;exclude>
    &lt;call control-id="ac-1"/>
  &lt;/exclude>
&lt;/import>
</tagging><p>Result: all controls from the catalog are included <em>except</em> AC-1.</p>
          <cf file="examples/exclude-call-test_profile.xml"/></section>
        <section>
          <head>Order of controls returned in selection</head>
          <p>Because controls may be organized in the subsequence merge stage, order of controls
            returned in the selection step is unimportant in most circumstances. If no merge
            directive is applied, however, or the <q>no merge</q> rule is used (see below), controls
            are returned for an import in the order of their appearance in their catalog of
            origin.</p>
        </section>
        </section>
      <section>
        <head>Copying parameters</head>
        <p>Unlike controls, parameters are copied implicitly. Whether a parameter in the source
          catalog is copied into the result depends on two factors: its location, and whether it is
          referenced by an <t>insert</t> directive in the result catalog.</p>
        <p><s>insert</s>  directives may occur anywhere in a catalog's data content including not
          only in controls, but in other parameters. Thus a parameter may have to be included by
          virtue of an <s>insert</s> directive, making reference to it, that occurs in another
          parameter, included by virtue of a different  <s>insert</s> directive found in an included
          control.</p>
        <p>A reasonable strategy for implementing this requirement is to copy all parameters through
          to interim catalogs in the <term>selection</term> phase, and then remove all parameters
          that are not (directly or indirectly) referenced by <term>insert</term> directives in
          controls that have been selected.</p>
        <section>
          <head>Parameters given in controls</head>
          <p>Any parameter (<s>param</s> element) that appears in a control being selected, appears
            in the result, unless the parameter element was indicated by a remove statement (see
            below).</p>
          <mapping>
            <tagging whose="source_catalog">&lt;control id="a1">
    &lt;title>Control A1&lt;/title>
    &lt;param id="param-a1.a">
        &lt;label>a1.a parameter&lt;/label>
        &lt;value>a1.a value&lt;/value>
    &lt;/param>
    &lt;prop name="status">alive&lt;/prop>
    &lt;part name="statement" id="a1-stmt">
        &lt;p>A1 aaaaa aaaaaaaaaa&lt;/p>
    &lt;/part>
&lt;/control></tagging>
          </mapping>
          <cf file="examples/include-all-test_profile.xml"/>
        </section>
        <section>
          <head>Loose parameters</head>
          <p>Parameters may sometimes be given in catalogs outside of controls. For example, a
            parameter that is referenced from inside two different controls, may be represented
            outside both of them, within a group.</p>
          <p>These parameters are copied if (only if) a control is also propagated, which after
            modification contains an <s>insert</s> directive referencing this parameter. The
            parameter appears in the location in the resolved catalog corresponding to its location
            in the source, albeit ungrouped if no <s>merge/as-is</s> is given.</p>
          <p>When a catalog is organized by a <s>merge/custom</s> directive, loose parameters are
            copied into the resulting grouping structure directly preceding the first control
            appearing that contains an <s>insert</s> directive referencing that parameter.</p>
          <p>Parameters that are not referenced by an <s>insert</s>, do not appear in the result
            catalog.</p>
          <mapping/>
        </section>
      </section>
      <section>
        <head>Circular imports</head>
        <p>When a profile imports a profile, the subordinate profile is resolved into a catalog
          using the same rules. This presents a possibility of circular imports, when a profile is
          directed to import itself either directly or indirectly.</p>
        <p>A <term>circular import</term> is defined as a directive to import a resource, which has
          already been called higher in the import hierarchy. For example, if Profile A imports
          Profile B, and Profile B imports Profile A, the second import is circular. (An import at
          the top can only be circular if a profile tries to import itself.) If A imports B, B
          imports C and C imports A, C’s import is circular.</p>
        <p>Note that an import can only be circular within the context of processing a particular
          profile. In the last example, C’s import would not be circular if invoked in the context
          of resolving B by itself (without being imported by A), or of resolving some other profile
          that did not import A. (D importing B importing C importing A would not be a problem.)</p>
        <p>Circular imports are inoperative, and may be reported as an error <revisit>[or
            warning]</revisit>.</p>
        <p>An import that is not circular (refers to a document not already imported) results in an
          interim catalog, subject to merging with other interim catalogs in the merge stage.</p>
        <mapping unit-test="profile-resolution-examples/home_profile.xml">
          <p>A profile identified as <code>home_profile.xml</code> imports another one identified as
              <code>circular_profile.xml</code>:</p>
          <tagging whose="source_profile">&lt;profile id="home_profile">
  &lt;metadata>...&lt;/metadata>
  &lt;import href="circular_profile.xml">
     &lt;include>
        &lt;call control-id="ac-1"/>
     &lt;/include>
  &lt;/import>
&lt;/profile>
</tagging>
          <p>In turn this file invokes <code>home_profile.xml</code>:</p>
          <tagging whose="source_profile">&lt;profile id="circular_profile">
  &lt;metadata>...&lt;/metadata>
  &lt;import href="home_profile.xml">
     &lt;include>
        &lt;call control-id="ac-1"/>
     &lt;/include>
  &lt;/import>
&lt;/profile>
</tagging>
          <p>No interim catalog is produced for the circular import:</p>
          <tagging whose="target_catalog">&lt;profile id="home_profile_RESOLVED">
  &lt;metadata>...&lt;/metadata>
&lt;/profile>
</tagging>
          <p>Optionally, a processor may produce a comment indicating the lapse:</p>
          <tagging whose="target_catalog">&lt;profile id="home_profile_RESOLVED">
  &lt;metadata>...&lt;/metadata>
  &lt;!-- referenced resource 'home_profile.xml' cannot be resolved from resource 'circular_profile': circular dependency -->
&lt;/profile>
</tagging>
        </mapping>
      </section>
      </section>
      <section>
        <head>Merge - manage and organize imported controls</head>
        <section>
          <head><s>merge/combine</s> - handling control collisions</head>
          <p><term>Colliding controls</term> (or <term>clashing</term>) describes the condition that
          occurs when multiple invocations of controls with the same ID are given, and so a profile
          resolution will result in duplicative and/or contradictory information. Even given a rule
          against multiple imports of the same resource, it may frequently occur that in profiles
          (especially profiles under development), multiple copies – and with variations – may be
          invoked from different sources. For example, if a profile tailors another profile which
          includes a control with amendments, and then (the top-level profile) includes the same
          control directly from its original catalog, a collision will occur between these two
          variants.</p>
          <p>Generally such a collision is readily detectable as long as IDs have not been modified;
          in other words, constraints over uniqueness (within document scope) of IDs will be
          violated in resolved instances where two (perhaps different) representations of the same
          control appear. Careful profile authors will be able to detect and prevent these resulting
          problems.</p>
        <p>Apart from handling problems and exceptions, however, for different purposes different
          profiles might wish to apply different rules. OSCAL offers three such rules: the
          directives for each are given as a value on the <s>@method</s> attribute of a profile
            <s>merge/combine</s> element.</p>
          <section>
          <head>No <s>merge/combine</s> given</head>
          <p>If no <s>merge</s> directive is given in the profile, or if a <s>merge</s> is given
            without a <s>combine</s>, control or parameter clashes are treated as if
              <s>merge/combine[@method='keep']</s> were given. A profile with no <s>merge</s>
            directive:</p>
          <tagging whose="source_profile">&lt;profile>
  &lt;import href="#catalog1"/>
  &lt;import href="#catalog2"/>
&lt;/profile></tagging>
          <p>is the same as</p>
          <tagging whose="source_profile">&lt;profile>
  &lt;import href="#catalog1"/>
  &lt;import href="#catalog2"/>
  &lt;merge>
    &lt;combine method="keep"/>
  &lt;/merge>
&lt;/profile></tagging>
          <mapping unit-test="profile-resolution-examples/merge-implicit-keep_profile.xml"/>
        </section>
        <section>
          <head><q>No merge</q> merge rule</head>
          <p>When a merge is indicated by <s>merge combine[@method='keep']</s>, or not given, the
              <q>no merge</q> merge rule is used. Clashing controls or parameters are not merged.
            Their groups are merged only if another <s>merge</s> directive such as <s>as-is</s> is
            given.</p>
          <tagging whose="source_profile">&lt;merge>
  &lt;combine method="keep"/>
&lt;/merge>
</tagging>
          <p>Under this directive, colliding controls will result in invalid results, as they will
            both appear in the results with the same ID. Accordingly, this setting may be useful in
            ensuring integrity of references to controls as given in the profile: if any included
            control is called only once, clashing controls will not be produced and validation will
            succeed.</p>
          <mapping unit-test="profile-resolution-examples/merge-keep_profile.xml">
            <tagging whose="source_profile">&lt;profile xmlns="http://csrc.nist.gov/ns/oscal/1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/1.0 ../../../../xml/schema/oscal_profile_schema.xsd"
    id="merge-keep_profile">
    &lt;metadata> … &lt;/metadata>
    &lt;import href="abc-simple_catalog.xml">
        &lt;include>
            &lt;call control-id="a1"/>
            &lt;call control-id="b1"/>
        &lt;/include>
    &lt;/import>
    &lt;import href="abc-simple_catalog.xml">
        &lt;include>
            &lt;call control-id="a1"/>
            &lt;call control-id="b1"/>
        &lt;/include>
    &lt;/import>
    &lt;merge>
        &lt;combine method="keep"/>
    &lt;/merge>
&lt;/profile></tagging>
            <p>In the result (showing interim catalogs):</p>
            <tagging whose="target_catalog">&lt;profile xmlns="http://csrc.nist.gov/ns/oscal/1.0"
    id="merge-keep_profile">
    &lt;metadata> … &lt;/metadata>
    &lt;catalog id="…">
      &lt;control id="a1"> … &lt;/control>
      &lt;control id="b1"> … &lt;/control>
    &lt;/catalog>
    &lt;catalog id="…">
      &lt;control id="a1"> … &lt;/control>
      &lt;control id="b1"> … &lt;/control>
    &lt;/catalog>
&lt;/profile></tagging>
          </mapping>
          <p>In this case, downstream errors should be expected: the two <code>a1</code> controls
            clash with each other, as do the two <code>b1</code> controls. To remove the duplicates,
            either repair the source catalog to avoid the redundant invocations (usually a better
            solution) or (when that is unavoidable) use a different merge combination rule.</p>
          <p>Processors may optionally produce warnings when clashing controls are produced due to
            redundant invocations.</p>
        </section>
          <section>
            <head><q>Use first</q> merge combination rule</head>
          <tagging whose="source_profile">&lt;merge>
  &lt;combine="use-first"/>
&lt;/merge>
</tagging>
            <p>When the <term>use first combination rule</term> is applied, the first reference to a
            given control, with respect to the document order of the source data, prevails over
            later references. <q>First</q> is determined in reference to a top-down, depth-first
            traversal of the profile import hierarchy. So if a profile is imported before a catalog,
            and the imported profile presents a representation of a control also given in the
            catalog import, the profile’s representation (perhaps modified) is taken. However, if
            the import directive targeting the catalog appears first, the catalog's (unmodified)
            representation of the control is included.</p>
            <p>The same logic applies to parameters in the source catalogs, as modified by parameter
              <s>set</s> directives.</p>
          <mapping unit-test="profile-resolution-examples/merge-keep_profile.xml">
            <tagging whose="source_profile">&lt;profile xmlns="http://csrc.nist.gov/ns/oscal/1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/1.0 ../../../../xml/schema/oscal_profile_schema.xsd"
    id="merge-keep_profile">
    &lt;metadata> … &lt;/metadata>
    &lt;import href="abc-simple_catalog.xml">
        &lt;include>
            &lt;call control-id="a1"/>
            &lt;call control-id="c1"/>
        &lt;/include>
    &lt;/import>
    &lt;import href="abc-simple_catalog.xml">
        &lt;include>
            &lt;call control-id="a1"/>
            &lt;call control-id="b1"/>
        &lt;/include>
    &lt;/import>
    &lt;merge>
        &lt;combine method="use-first"/>
    &lt;/merge>
&lt;/profile></tagging>
            <p>In the result (showing interim catalogs):</p>
            <tagging whose="target_catalog">&lt;profile xmlns="http://csrc.nist.gov/ns/oscal/1.0"
    id="merge-keep_profile">
    &lt;metadata> … &lt;/metadata>
    &lt;catalog id="…">
      &lt;control id="a1"> … &lt;/control>
      &lt;control id="c1"> … &lt;/control>
    &lt;/catalog>
    &lt;catalog id="…">
      &lt;control id="b1"> … &lt;/control>
    &lt;/catalog>
&lt;/profile></tagging>
          </mapping>
          </section>
          <section>
            <head><q>Merge controls</q> merge combination rule</head>
          <tagging whose="source_profile">&lt;merge>
  &lt;combine="merge"/>
&lt;/merge>
</tagging>
            <p>When the <term>merge controls</term> merge combination rule is applied, the processor
            will merge all representations of a given control, as distinguished by ID, into a single
            unified representation.</p>
            <p>The single unified representation is assembled by aggregating all the contents of all
              the (clashing) control instances and discarding duplicate branches.</p>
            <p>Example:</p>
            <tagging whose="source_catalog">&lt;control id="a1">
  &lt;title>Control A1&lt;/title>
  &lt;prop name="label">A-1&lt;/prop>
  &lt;prop name="status">pending&lt;/prop>
&lt;/control>
</tagging>
            <p>merging with</p>
            <tagging whose="source_catalog">&lt;control id="a1">
  &lt;title>Control A1&lt;/title>
  &lt;prop name="label">A-1&lt;/prop>
  &lt;prop name="status">ready&lt;/prop>
&lt;/control>
</tagging>
            <p>results in</p>
            <tagging whose="target_catalog">&lt;control id="a1">
  &lt;title>Control A1&lt;/title>
  &lt;prop name="label">A-1&lt;/prop>
  &lt;prop name="status">pending&lt;/prop>
  &lt;prop name="status">ready&lt;/prop>
&lt;/control>
</tagging>
            <p>Note that groups are not merged by this rule; for that purpose, <s>merge/as-is</s> or
              <s>merge/custom</s> should be used (in addition to the combine directive).</p>
          </section>
        </section>
        <section>
          <head>How to build a structure</head>
          <section>
            <head>Unstructured catalog output</head>
            <p>Two <s>merge</s> directives are used to introduce structure into a profile result
            catalog, <s>as-is</s> and <s>custom</s>.</p>
            <p>Profiles that have neither of these directives are resolved as unstructured catalogs,
            with no groupings of controls.</p>
          </section>
          <section>
            <head>as is</head>
            <p>reproduce structure of input catalog</p>
            <p>(consider case of multiple imports of single resource)</p>
            <section>
              <head>Implicit inclusions under <s>as-is</s></head>
              <p>Under <term>as is</term>, a resolved profile’s structure is expected to replicate the
                structure of source catalogs.</p>
              <p>This is achieved by propagating, with all controls that are included, all groups
                that they appear within, along with the groups’ IDs, titles and other contents.</p>
              <p>Groups that do not include controls that have been included (either directly or as
                descendants of contained groups, are not propagated to the result.</p>
              <p>In addition to groups, under 'as is' mergine, certain controls will be included
                implicitly. This happens when they have not been called, but they contain controls
                that have been called. Such controls are treated like groups included 'as is' – they
                must be propagated to retain the structure for descendant controls.</p>
              <p>Unlike groups, however, the title of such a control is given with the resolution,
                but no other contents are presented apart from (a) controls included explicitly or
                (b) child controls that must be included for the sake of their own (included) child
                (or descendant) controls.</p>
              <p>Example:</p>
              <tagging whose="source_catalog">&lt;import href="#XYZ-catalog">
  &lt;include>
    &lt;call control-id='xyz-1.1'/>&lt;!-- bedtime routine control -->
    &lt;call control-id='xyz-1.2.1'/>&lt;!-- kitchen trashcan -->
  &lt;/include>
&lt;/import>
</tagging>
              <p>the result would be</p>
              <tagging whose="target_catalog">&lt;control id="xyz-1">
  &lt;title>Basic Hygiene&lt;/title>
  &lt;control id="xyz-1.1">&lt;!-- bedtime routine -->...&lt;/control>
  &lt;control id="xyz-1.2">
    &lt;title>Kitchen cleanup&lt;/title>
	&lt;control id="xyz-1.2.1">&lt;!-- kitchen trashcan -->...&lt;/control>
  &lt;/control>
&lt;/control>

</tagging>
            </section>
          </section>
          <section>
            <head><s>custom</s></head>
            <p>a structure is provided, and controls are selected into it <revisit>spec  this
              out</revisit></p>
            <p>(nb this means that import/all with selection here also works)</p>
            <p><s>@with-child-controls</s> works, but all other organization is explicit (unlike 'as
            is' merging).</p>
          </section>
        </section>
      </section>
      <section>
        <head>Modify - set parameters and amend or alter controls</head>
        <p>(Aka <term>patching</term>) Explicit modification of control content</p>
        <p>There are two ways a control may need to be modified. Commonly, controls might be amended
        – new material might be added. (For example, the priority marker properties P1-P3 in the
        SP800-53 LOW MODERATE and HIGH baselines.) Less commonly, materials might be removed or
        edited.</p>
        <p>OSCAL does not provide for <q>changing</q> a control, but editing can be achieved by removing
          contents and adding (edited) contents back. In other words, editing is considered to be
          the same kind of patching as removing combined with adding.</p>
      <p>In addition to any modification or adjustment to controls, this section of a profile is used
        to set parameter values or other properties of parameters declared in catalogs and
        referenced from their text. Parameters are propagated with the profile's setting into the
        result catalog for its use.</p>
        <section>
          <head>Setting Parameters</head>
          <p>Modification of parameter settings is indicated using <s>set</s>.</p>
          <p>Parameters are not always given within controls. A profile resolution result must
          include copies (with or without modifications or settings) of all parameters defined
          within the source catalog, which are referenced from <s>insert</s> directives anywhere
          inside included controls.</p>
        <p>Accordingly, any parameter referenced by an <s>insert</s> in any source catalog is copied
          from catalog source to result <revisit>parameter propagation rules for merge/as-is,
            merge/custom</revisit> without any configuration required in the profile.</p>
          <p>However, a profile should not reproduce parameters from source catalogs, which are not
          referenced from <s>insert</s> directives.</p>
          <p>When parameters are propagated, they may be modified by <s>set</s> directives given in
          the profile.</p>
        <p>If more than one <s>set</s> directive is given for the same parameter, all are applied,
          in the sequence given in the profile. <revisit>[XXX even when
            merge/combine/@method='use-first'?]</revisit></p>
          <ul>
            <li><p>A <s>set/title</s> replaces the <s>param/title</s> on the affected parameter</p></li>
            <li><p>A <s>set/label</s> replaces the <s>param/label</s> on the affected parameter</p></li>
            <li><p>A <s>set/value</s>
              <em>or</em> a <s>set/select</s> replaces <em>any</em>
              <s>param/value</s> or <s>param/select</s> on the affected parameter</p></li>
            <li><p>Other elements given in a parameter <s>set</s> are added to the affected
              parameter, after elements of the same name</p></li>
            <li><p>The prescribed order of elements in the affected parameter is retained: <t>label</t>;
                <t>usage</t>; <t>constraint</t>; <t>guideline</t>; <t>value</t> or <t>select</t> (a
              choice); and <t>link</t>.</p></li>
          </ul>
          <p>[example]</p>
          <tagging whose="source_catalog">&lt;param id="p1">
  &lt;title>Password length&lt;/title>
  &lt;value>10&lt;/value>
&lt;/param>
</tagging>
        <tagging whose="source_profile">&lt;set param-id="p1">
  &lt;select>
    &lt;choice>10&lt;/choice>
    &lt;choice>11&lt;/choice>
  &lt;/select>
&lt;/set>
</tagging>
        <p>Note that <t>select</t> replaces <s>value</s>:</p>
        <tagging whose="target_catalog">&lt;param id="p1">
  &lt;title>Password length&lt;/title>
  &lt;select>
    &lt;choice>10&lt;/choice>
    &lt;choice>11&lt;/choice>
  &lt;/select>
&lt;/param>
</tagging>
        <section>
          <head>Setting a missing parameter</head>
        </section>
        </section>
      <section>
        <head>Altering controls</head>
        <section>
          <head>Adding contents to controls</head>
        </section>
        <section>
          <head>Removing contents from controls</head>
        </section>
        <section>
          <head>Implicit alterations</head>
          <p>Finally some alterations are made automatically.</p>
          <p>For example, <s>link</s> elements in source data representing cross-references in a
            catalog, may no longer be effective in catalogs produced from profiles, which have not
            included the elements (controls or other) to which the links refer.</p>
          <p><revisit>Either: expand the links to refer back to the source catalogs; or remove the
              links.</revisit></p>
        </section>
      </section>
      </section>
    </section>
    <section>
      <head>Profile tools/utilities</head>
      <ul>
        <li><p>rendering - showing both unresolved (raw) and resolved profiles</p></li>
        <li><p>editing / integrity checking</p></li>
        <li><p>rewriting/normalization</p></li>
        <li><p>diffing</p></li>
        <li><p>deriving a profile as the delta of two catalogs ('base' and 'profile')</p></li>
      </ul>
    </section>
  </SPECIFICATION>